package handlers

import (
	"context"
	"tg_bot/internal/models"
	"tg_bot/internal/services/payment"
	"tg_bot/internal/services/user"
	"tg_bot/pkg/logger"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type MessageHandler struct {
	userService    *user.Service
	paymentService *payment.Service
	logger         logger.Logger
}

func NewMessageHandler(userService *user.Service, paymentService *payment.Service, logger logger.Logger) *MessageHandler {
	return &MessageHandler{
		userService:    userService,
		paymentService: paymentService,
		logger:         logger,
	}
}

func (h *MessageHandler) HandleMessage(ctx context.Context, bot *tgbotapi.BotAPI, message *tgbotapi.Message) error {
	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user, err := h.userService.GetOrCreateUser(
		ctx,
		message.From.ID,
		message.From.UserName,
		message.From.FirstName,
		message.From.LastName,
	)
	if err != nil {
		h.logger.Error("Failed to get user", "error", err)
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	switch message.Text {
	case "/start":
		return h.handleStart(bot, message.Chat.ID, user)
	case "/buy":
		return h.handleBuy(bot, message.Chat.ID, user)
	default:
		return h.handleText(bot, message, user)
	}
}

func (h *MessageHandler) handleStart(bot *tgbotapi.BotAPI, chatID int64, user *models.User) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	return h.sendMainMenu(bot, chatID, user.IsPremium)
}

func (h *MessageHandler) handleBuy(bot *tgbotapi.BotAPI, chatID int64, user *models.User) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫
	return h.sendPaymentMenu(bot, chatID)
}

func (h *MessageHandler) handleText(bot *tgbotapi.BotAPI, message *tgbotapi.Message, user *models.User) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	state, exists := h.userService.GetUserState(context.Background(), user.TelegramID)
	if !exists {
		// –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		return h.sendMainMenu(bot, message.Chat.ID, user.IsPremium)
	}

	var response string
	switch state {
	case "reverse":
		response = h.reverseString(message.Text)
	case "hello":
		response = "Hello " + message.Text
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, response)
	_, err := bot.Send(msg)
	if err != nil {
		h.logger.Error("Failed to send message", "error", err)
		return err
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	return h.sendMainMenu(bot, message.Chat.ID, user.IsPremium)
}

func (h *MessageHandler) sendMainMenu(bot *tgbotapi.BotAPI, chatID int64, isPremium bool) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–µ–∂–∏–º 1: –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É", "mode_reverse"),
			tgbotapi.NewInlineKeyboardButtonData("–†–µ–∂–∏–º 2: Hello + —Å—Ç—Ä–æ–∫–∞", "mode_hello"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "buy_premium"),
		),
	)

	text := "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:"
	if isPremium {
		text += "\n\n‚ú® –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!"
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	_, err := bot.Send(msg)
	return err
}

func (h *MessageHandler) sendPaymentMenu(bot *tgbotapi.BotAPI, chatID int64) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíé –ü—Ä–µ–º–∏—É–º (299‚ÇΩ)", "buy_premium"),
			tgbotapi.NewInlineKeyboardButtonData("üöÄ Pro (799‚ÇΩ)", "buy_pro"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:")
	msg.ReplyMarkup = keyboard
	_, err := bot.Send(msg)
	return err
}

func (h *MessageHandler) reverseString(s string) string {
	runes := []rune(s)
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return string(runes)
}
