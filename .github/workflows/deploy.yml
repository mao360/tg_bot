name: Deploy Telegram Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Останавливаем старый контейнер если он запущен
          docker stop tg-bot || true
          docker rm tg-bot || true
          
          # Удаляем старый образ
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
          
          # Логинимся в GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Скачиваем новый образ
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Проверяем что образ скачался
          echo "=== Available images ==="
          docker images | grep ${{ env.IMAGE_NAME }}
          
          # Тестируем запуск контейнера (не в фоне)
          echo "=== Testing container startup ==="
          timeout 10s docker run --rm --name tg-bot-test \
            -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
            -e PAYMENT_PROVIDER_TOKEN=${{ secrets.PAYMENT_PROVIDER_TOKEN }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || echo "Container test completed"
          
          # Запускаем новый контейнер в фоне
          echo "=== Starting production container ==="
          docker run -d --name tg-bot --restart unless-stopped \
            -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
            -e PAYMENT_PROVIDER_TOKEN=${{ secrets.PAYMENT_PROVIDER_TOKEN }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Ждем немного и проверяем статус
          sleep 5
          echo "=== Container Status ==="
          docker ps -a | grep tg-bot || echo "Container not found"
          
          # Показываем логи если контейнер упал
          echo "=== Container Logs ==="
          docker logs tg-bot --tail 50 || echo "No logs available"
